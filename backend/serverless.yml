custom:
    userTable: users-${sls:stage}
    avatarTable: avatars-${sls:stage}
    soulboundTable: soulbounds-${sls:stage}
    serverless-dynamodb:
        # If you only want to use DynamoDB Local in some stages, declare them here
        stages:
            - dev
        start:
            docker: true
            port: 8000
            inMemory: true
            migrate: true
            seed: true
            convertEmptyValues: true
            # Uncomment only if you already have a DynamoDB running locally
            noStart: true

# serverless.yml
org: tihechen
app: rog
service: rog-services
frameworkVersion: "3"
useDotenv: true
provider:
    name: aws
    runtime: nodejs18.x
    region: ${env:REGION}
    environment:
        USER_TABLE: ${self:custom.userTable}
        AVATAR_TABLE: ${self:custom.userTable}
        SOULBOUND_TABLE: ${self:custom.userTable}
    memorySize: 128 # optional, in MB, default is 1024
    timeout: 29 # optional, in seconds, default is 6
    logs:
        httpApi: true
    httpApi:
        cors: true
    iamRoleStatements:
        - Effect: Allow
          Action:
              - dynamodb:DescribeTable
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
          Resource:
              - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}"
              - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.AVATAR_TABLE}"
              - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SOULBOUND_TABLE}"

functions:
    freemint:
        handler: routes/FreeMintHandler.mint
        events:
            - httpApi:
                  path: /mint
                  method: get
    metadata:
        handler: routes/AvatarMetadataHandler.metadata
        events:
            - httpApi:
                  path: /metadata/{tokenId}
                  method: get
    reveal:
        handler: routes/AvatarRevealHandler.reveal
        events:
            - httpApi:
                  path: /reveal/{tokenId}
                  method: post
    sign:
        handler: routes/AvatarSignHandler.sign
        events:
            - httpApi:
                  path: /sign
                  method: get
## create dynamodb tables, comment if the tables exist
# resources:
#     - ${file(database/utils/dynamodb-table.yml)}

plugins:
    - serverless-plugin-typescript
    - serverless-dotenv-plugin
    - serverless-dynamodb
    - serverless-offline
